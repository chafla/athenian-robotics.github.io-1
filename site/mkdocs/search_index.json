{
    "docs": [
        {
            "location": "/",
            "text": "Athenian Robotics\n\n\nThe \nAthenian\n \nRobotics Github home is \nhere\n.\n\n\nCoutdown to Bag Day\nCountdown\n\n\n\n.tcw:after { content: ''; display: block; margin-top: 25%; }\n\n\n\n(function(d, s, id) { var js, pjs = d.getElementsByTagName(s)[0]; if (d.getElementById(id)) return; js = d.createElement(s); js.id = id; js.src = \"//www.tickcounter.com/static/js/loader.js\"; pjs.parentNode.insertBefore(js, pjs); }(document, 'script', 'tickcounter-sdk'));",
            "title": "Home"
        },
        {
            "location": "/#athenian-robotics",
            "text": "The  Athenian  \nRobotics Github home is  here .  Coutdown to Bag Day Countdown  .tcw:after { content: ''; display: block; margin-top: 25%; }  (function(d, s, id) { var js, pjs = d.getElementsByTagName(s)[0]; if (d.getElementById(id)) return; js = d.createElement(s); js.id = id; js.src = \"//www.tickcounter.com/static/js/loader.js\"; pjs.parentNode.insertBefore(js, pjs); }(document, 'script', 'tickcounter-sdk'));",
            "title": "Athenian Robotics"
        },
        {
            "location": "/github-repos/",
            "text": "Github Repos\n\n\n\n\nmqtt-intro\n\n\nopencv-intro\n\n\nobject-tracking\n\n\nline-following\n\n\nrobot-controllers\n\n\nlidar-examples\n\n\ncommon-robotics",
            "title": "Github Repos"
        },
        {
            "location": "/github-repos/#github-repos",
            "text": "mqtt-intro  opencv-intro  object-tracking  line-following  robot-controllers  lidar-examples  common-robotics",
            "title": "Github Repos"
        },
        {
            "location": "/osx-setup/",
            "text": "OSX Setup\n\n\nOne-time Steps\n\n\nInstall the following pieces of software: \n\n\nXCode\n\n\nJava 8\n\n\nHomebrew\n\n\n$ /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n\n\n\n\nPython 2\n\n\n$ brew install python\n\n\n\n\nPython 3\n\n\n$ brew install python3\n\n\n\n\npip\n\n\n$ sudo easy_install pip\n\n\n\n\ngit\n\n\n$ brew install git\n\n\n\n\nmaven\n\n\n$ brew install maven\n\n\n\n\ngradle\n\n\n$ brew install gradle\n\n\n\n\nhttpie\n\n\n$ brew install httpie\n\n\n\n\nGitKraken\n or \nSourceTree\n\n\nOngoing Admin\n\n\nKeep your brew-installed apps up to date with: \n\n\n$ brew update\n$ brew upgrade\n\n\n\n\nYou can check on the health of your \nbrew\n installation with:\n\n\n$ brew doctor",
            "title": "OSX"
        },
        {
            "location": "/osx-setup/#osx-setup",
            "text": "",
            "title": "OSX Setup"
        },
        {
            "location": "/osx-setup/#one-time-steps",
            "text": "Install the following pieces of software:",
            "title": "One-time Steps"
        },
        {
            "location": "/osx-setup/#xcode",
            "text": "",
            "title": "XCode"
        },
        {
            "location": "/osx-setup/#java-8",
            "text": "",
            "title": "Java 8"
        },
        {
            "location": "/osx-setup/#homebrew",
            "text": "$ /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"",
            "title": "Homebrew"
        },
        {
            "location": "/osx-setup/#python-2",
            "text": "$ brew install python",
            "title": "Python 2"
        },
        {
            "location": "/osx-setup/#python-3",
            "text": "$ brew install python3",
            "title": "Python 3"
        },
        {
            "location": "/osx-setup/#pip",
            "text": "$ sudo easy_install pip",
            "title": "pip"
        },
        {
            "location": "/osx-setup/#git",
            "text": "$ brew install git",
            "title": "git"
        },
        {
            "location": "/osx-setup/#maven",
            "text": "$ brew install maven",
            "title": "maven"
        },
        {
            "location": "/osx-setup/#gradle",
            "text": "$ brew install gradle",
            "title": "gradle"
        },
        {
            "location": "/osx-setup/#httpie",
            "text": "$ brew install httpie",
            "title": "httpie"
        },
        {
            "location": "/osx-setup/#gitkraken-or-sourcetree",
            "text": "",
            "title": "GitKraken or SourceTree"
        },
        {
            "location": "/osx-setup/#ongoing-admin",
            "text": "Keep your brew-installed apps up to date with:   $ brew update\n$ brew upgrade  You can check on the health of your  brew  installation with:  $ brew doctor",
            "title": "Ongoing Admin"
        },
        {
            "location": "/windows-setup/",
            "text": "Windows Setup",
            "title": "Windows"
        },
        {
            "location": "/windows-setup/#windows-setup",
            "text": "",
            "title": "Windows Setup"
        },
        {
            "location": "/python-admin/",
            "text": "Python Administration\n\n\nInstallation\n\n\nOSX\n\n\nInstallation details are \n\nhere\n.\n\n\nPython3 requires \ngcc\n, which you can get by installing \n\nXCode\n or \n\nCommand Line Tools\n.\n\n\nInstall python3 and pip3 with:\n\n\n$ brew install python3\n\n\n\n\nEV3\n\n\nInstall python3 and pip3:\n\n\n$ sudo apt-get install python3\n$ sudo apt-get install python3-pip\n\n\n\n\nPackage Management\n\n\nDetermine installed packages with:\n\n\n$ pip list \n\n\n\n\nDetermine outdated packages with:\n\n\n$ pip list --outdated\n\n\n\n\nInstall a package with:\n\n\n$ pip install pkg_name\n\n\n\n\nUpdate a package with:\n\n\n$ pip install --upgrade pkg_name",
            "title": "Admin"
        },
        {
            "location": "/python-admin/#python-administration",
            "text": "",
            "title": "Python Administration"
        },
        {
            "location": "/python-admin/#installation",
            "text": "",
            "title": "Installation"
        },
        {
            "location": "/python-admin/#osx",
            "text": "Installation details are  here .  Python3 requires  gcc , which you can get by installing  XCode  or  Command Line Tools .  Install python3 and pip3 with:  $ brew install python3",
            "title": "OSX"
        },
        {
            "location": "/python-admin/#ev3",
            "text": "Install python3 and pip3:  $ sudo apt-get install python3\n$ sudo apt-get install python3-pip",
            "title": "EV3"
        },
        {
            "location": "/python-admin/#package-management",
            "text": "Determine installed packages with:  $ pip list   Determine outdated packages with:  $ pip list --outdated  Install a package with:  $ pip install pkg_name  Update a package with:  $ pip install --upgrade pkg_name",
            "title": "Package Management"
        },
        {
            "location": "/python-links/",
            "text": "Python Links\n\n\nIDEs\n\n\n\n\nPyCharm\n\n\nPyCharm Edu\n\n\n\n\nCloud REPLs\n\n\n\n\nJupyter\n  (New->Terminal)\n\n\n\n\nCourses\n\n\n\n\nGoogle Python Course\n\n\nInteractive Python Tutorial\n\n\n\n\nBooks\n\n\n\n\nThink Python Book\n\n\n\n\nev3dev\n\n\n\n\nev3dev Python Docs\n\n\n\n\nMisc\n\n\n\n\nPython Cheatsheets",
            "title": "Links"
        },
        {
            "location": "/python-links/#python-links",
            "text": "",
            "title": "Python Links"
        },
        {
            "location": "/python-links/#ides",
            "text": "PyCharm  PyCharm Edu",
            "title": "IDEs"
        },
        {
            "location": "/python-links/#cloud-repls",
            "text": "Jupyter   (New->Terminal)",
            "title": "Cloud REPLs"
        },
        {
            "location": "/python-links/#courses",
            "text": "Google Python Course  Interactive Python Tutorial",
            "title": "Courses"
        },
        {
            "location": "/python-links/#books",
            "text": "Think Python Book",
            "title": "Books"
        },
        {
            "location": "/python-links/#ev3dev",
            "text": "ev3dev Python Docs",
            "title": "ev3dev"
        },
        {
            "location": "/python-links/#misc",
            "text": "Python Cheatsheets",
            "title": "Misc"
        },
        {
            "location": "/repl1/",
            "text": "Primitive values\n\n\n# Numbers\n2 + 4\n7 * 5\ni_val = 8\nf_val = 4.3\n\ni_val\ni_val + 3\ni_val * f_val\n\n# Strings\n\"Hello \" + 'World'\n\ns_val = \"dog\"\n\"Watch the \" + s_val + \" run\"\n\ns_val * 10\n\n# Determining type\ntype(i_val)\ntype(f_val)\n\n\n\n\nBuilt-in Functions\n\n\nabs(-3)\nmax(1, 2, 3)\nmin(5, 6, 3, 4, 8)\nlen('this is a string')\n\ni = 5\n\"An int value: \" + i\n\"An int value: \" + str(i)\n\n\n\n\nLists\n\n\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nlist2 = range(20)\nlist3 = range(5, 12)\nlist4 = range(0, 14, 2)\nlist5 = [\"goat\", 6, \"cow\", 4.2]\n\nlen(list1)\nlist1[2]\nlist1[-2]\n\nlist1[5]\nlist1[5] = 99\n\nlist1.append(88)\nlist1.insert(3, 44)\nlist1.remove(6)\n\nlist1 = list1 * 2\nlist1 *= 2\n\n\n\n\nLoops\n\n\nfor i in range(10):\n    print(\"The val is \" + str(i))\n\nfor c in \"This is a sentence\":\n    print(c)\n\n\n\n\nConditionals\n\n\nfor i in range(10):\n    if i%2 == 0:\n        print(str(i) + \" is even\")\n\nfor i in range(10):\n    if i%2 == 0:\n        print(str(i) + \" is even\")\n    else:\n        print(str(i) + \" is odd\")\n\n\n\n\nFunctions\n\n\ndef is_even(val):\n    return val%2 == 0\n\ndef is_odd(val):\n    return val%2 != 0\n\nfor i in range(10):\n    if is_even(i):\n        print(str(i) + \" is even\")\n    if is_odd(i):\n        print(str(i) + \" is odd\")\n\n\n\n\nFunction Exercises:\n\n\n\n\nWrite \ntriple_num()\n that triples a number.\n\n\nWrite \ngreet()\n that accepts a name and returns string saying \"Hello name\".\n\n\nWrite \nmy_abs()\n that returns the absolute value of a number.\n\n\nWrite \nstr_len()\n that returns the length of a string.\n\n\nWrite \nmax_val()\n that returns the maximum value in a list.\n\n\nWrite \nequal_str()\n that returns true if two strings are equal, regardless of case.\n\n\n\n\nStrings\n\n\nstr = \"Hello World!\"\nlen(str)\nstr.index(\"o\")\nstr.count(\"l\")\nstr.upper()\nstr.lower()\nstr.startswith(\"Hello\")\nstr.endswith(\"Hello\")\n\nvals = str.split(\" \")\nlen(vals)\nvals[1] + \" \" + vals[0]\n\nanimal = \"mouse\"\n\"Watch the {0} run\".format(animal)\n\nstr[2:8]\nstr[2:8:2]\nstr[::-1]\nstr[8:2:-1]\nstr[8:2:-2]\n\n\n\n\nSlices\n\n\nSyntax:\n \nlist[start_index : end_index : step]\n\n\nlist = range(10)\n\nlen(list)\n\nlist[4]\nlist[2:7]\n\nlist[:5]\nlist[5:]\nlist[:]\n\nlist[::1]\nlist[::2]\n\nlist[::-1]\nlist[::-2]\n\nlist[-1:-6:-1]\nlist[-1:-6:-2]\nlist[3:-3]\nlist[-3:3:-1]\n\nlist[2:5] = [15]\n\n# Sorting Lists\nsorted(list)\nsorted(list, reverse=True)\n\n# List assignments\na = range(5)\na\nb = a\nb\na[3] = 99\na\nb\n\nb = a[:]\na\nb\na[0] = 33\na\nb\n\n\n\n\nTuples\n\n\nTuples are very similar to lists, except they are immutable.\n\n\ntuple1 = (1, 2, 3, 4, 5)\ntuple2 = (3.0, \"cat\")\n\n# This is a no go\ntuple1[1] = 4\n\n# Unpacking \nval1, val2 = tuple2\nval3, val4, val5 = tuple1[1:4]\n\n\n\n\nDictionaries\n\n\ndict = {\"a\": \"moose\", \"b\": 2, \"c\": \"fox\"}\n\ndict\ndict[\"c\"]\ndict[\"c\"] = \"rat\"\ndict[\"c\"]\n\ndict2 = {}\nfor i in range(0, 10):\n    dict[\"val\" + str(i)] = i\ndict",
            "title": "REPL 1"
        },
        {
            "location": "/repl1/#primitive-values",
            "text": "# Numbers\n2 + 4\n7 * 5\ni_val = 8\nf_val = 4.3\n\ni_val\ni_val + 3\ni_val * f_val\n\n# Strings\n\"Hello \" + 'World'\n\ns_val = \"dog\"\n\"Watch the \" + s_val + \" run\"\n\ns_val * 10\n\n# Determining type\ntype(i_val)\ntype(f_val)",
            "title": "Primitive values"
        },
        {
            "location": "/repl1/#built-in-functions",
            "text": "abs(-3)\nmax(1, 2, 3)\nmin(5, 6, 3, 4, 8)\nlen('this is a string')\n\ni = 5\n\"An int value: \" + i\n\"An int value: \" + str(i)",
            "title": "Built-in Functions"
        },
        {
            "location": "/repl1/#lists",
            "text": "list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nlist2 = range(20)\nlist3 = range(5, 12)\nlist4 = range(0, 14, 2)\nlist5 = [\"goat\", 6, \"cow\", 4.2]\n\nlen(list1)\nlist1[2]\nlist1[-2]\n\nlist1[5]\nlist1[5] = 99\n\nlist1.append(88)\nlist1.insert(3, 44)\nlist1.remove(6)\n\nlist1 = list1 * 2\nlist1 *= 2",
            "title": "Lists"
        },
        {
            "location": "/repl1/#loops",
            "text": "for i in range(10):\n    print(\"The val is \" + str(i))\n\nfor c in \"This is a sentence\":\n    print(c)",
            "title": "Loops"
        },
        {
            "location": "/repl1/#conditionals",
            "text": "for i in range(10):\n    if i%2 == 0:\n        print(str(i) + \" is even\")\n\nfor i in range(10):\n    if i%2 == 0:\n        print(str(i) + \" is even\")\n    else:\n        print(str(i) + \" is odd\")",
            "title": "Conditionals"
        },
        {
            "location": "/repl1/#functions",
            "text": "def is_even(val):\n    return val%2 == 0\n\ndef is_odd(val):\n    return val%2 != 0\n\nfor i in range(10):\n    if is_even(i):\n        print(str(i) + \" is even\")\n    if is_odd(i):\n        print(str(i) + \" is odd\")",
            "title": "Functions"
        },
        {
            "location": "/repl1/#function-exercises",
            "text": "Write  triple_num()  that triples a number.  Write  greet()  that accepts a name and returns string saying \"Hello name\".  Write  my_abs()  that returns the absolute value of a number.  Write  str_len()  that returns the length of a string.  Write  max_val()  that returns the maximum value in a list.  Write  equal_str()  that returns true if two strings are equal, regardless of case.",
            "title": "Function Exercises:"
        },
        {
            "location": "/repl1/#strings",
            "text": "str = \"Hello World!\"\nlen(str)\nstr.index(\"o\")\nstr.count(\"l\")\nstr.upper()\nstr.lower()\nstr.startswith(\"Hello\")\nstr.endswith(\"Hello\")\n\nvals = str.split(\" \")\nlen(vals)\nvals[1] + \" \" + vals[0]\n\nanimal = \"mouse\"\n\"Watch the {0} run\".format(animal)\n\nstr[2:8]\nstr[2:8:2]\nstr[::-1]\nstr[8:2:-1]\nstr[8:2:-2]",
            "title": "Strings"
        },
        {
            "location": "/repl1/#slices",
            "text": "Syntax:   list[start_index : end_index : step]  list = range(10)\n\nlen(list)\n\nlist[4]\nlist[2:7]\n\nlist[:5]\nlist[5:]\nlist[:]\n\nlist[::1]\nlist[::2]\n\nlist[::-1]\nlist[::-2]\n\nlist[-1:-6:-1]\nlist[-1:-6:-2]\nlist[3:-3]\nlist[-3:3:-1]\n\nlist[2:5] = [15]\n\n# Sorting Lists\nsorted(list)\nsorted(list, reverse=True)\n\n# List assignments\na = range(5)\na\nb = a\nb\na[3] = 99\na\nb\n\nb = a[:]\na\nb\na[0] = 33\na\nb",
            "title": "Slices"
        },
        {
            "location": "/repl1/#tuples",
            "text": "Tuples are very similar to lists, except they are immutable.  tuple1 = (1, 2, 3, 4, 5)\ntuple2 = (3.0, \"cat\")\n\n# This is a no go\ntuple1[1] = 4\n\n# Unpacking \nval1, val2 = tuple2\nval3, val4, val5 = tuple1[1:4]",
            "title": "Tuples"
        },
        {
            "location": "/repl1/#dictionaries",
            "text": "dict = {\"a\": \"moose\", \"b\": 2, \"c\": \"fox\"}\n\ndict\ndict[\"c\"]\ndict[\"c\"] = \"rat\"\ndict[\"c\"]\n\ndict2 = {}\nfor i in range(0, 10):\n    dict[\"val\" + str(i)] = i\ndict",
            "title": "Dictionaries"
        },
        {
            "location": "/opencv/",
            "text": "OpenCV Notes\n\n\nOpenCV is described in detail \nhere\n.\n\n\nA great OpenCV resource is \npyimagesearch\n.\n\n\nA good OpenCV Python tutorial is \n\nhere\n.\n\n\nInstallation\n\n\nOSX\n\n\nInstall OpenCV 3 with:\n\n\n$ brew tap homebrew/science\n$ brew install opencv3 --with-contrib --with-python3 --with-java --with-examples \n$ echo /usr/local/opt/opencv3/lib/python2.7/site-packages >> /usr/local/lib/python2.7/site-packages/opencv3.pth\n\n\n\n\nDetailed instructions are \n\nhere\n.\n\n\n\nWarning: As of OpenCV 3.2.0, the --with-python3 option does not seem to work. Until this is \naddressed, use Python 2.7 with OpenCV 3.\n\n\n\n\nRaspbian\n\n\nDetailed instructions are \n\nhere\n.\nMake sure to use version \n3.2.0\n instead of \n3.1.0\n.\n\n\nDisplaying Raspi OpenCV camera images to a Mac\n\n\n1) Set \nDISPLAY\n env var to use the OSX machine (in this case \nmy-mac\n). \nOn the Raspi type:\n\n\n$ set DISPLAY my-mac:0\n\n\n\n\n2) Start the \nX\n server\n \n\nXQuartz\n on the OSX machine.\n\n\n3) Add the Raspi host name to enable connections to the X server (in this case \nmy-raspi\n). \nOn the OSX machine type:\n\n\n$ xhost + my-raspi\nmy-raspi being added to access control list",
            "title": "OpenCV"
        },
        {
            "location": "/opencv/#opencv-notes",
            "text": "OpenCV is described in detail  here .  A great OpenCV resource is  pyimagesearch .  A good OpenCV Python tutorial is  here .",
            "title": "OpenCV Notes"
        },
        {
            "location": "/opencv/#installation",
            "text": "",
            "title": "Installation"
        },
        {
            "location": "/opencv/#osx",
            "text": "Install OpenCV 3 with:  $ brew tap homebrew/science\n$ brew install opencv3 --with-contrib --with-python3 --with-java --with-examples \n$ echo /usr/local/opt/opencv3/lib/python2.7/site-packages >> /usr/local/lib/python2.7/site-packages/opencv3.pth  Detailed instructions are  here .  \nWarning: As of OpenCV 3.2.0, the --with-python3 option does not seem to work. Until this is \naddressed, use Python 2.7 with OpenCV 3.",
            "title": "OSX"
        },
        {
            "location": "/opencv/#raspbian",
            "text": "Detailed instructions are  here .\nMake sure to use version  3.2.0  instead of  3.1.0 .",
            "title": "Raspbian"
        },
        {
            "location": "/opencv/#displaying-raspi-opencv-camera-images-to-a-mac",
            "text": "1) Set  DISPLAY  env var to use the OSX machine (in this case  my-mac ). \nOn the Raspi type:  $ set DISPLAY my-mac:0  2) Start the  X  server   XQuartz  on the OSX machine.  3) Add the Raspi host name to enable connections to the X server (in this case  my-raspi ). \nOn the OSX machine type:  $ xhost + my-raspi\nmy-raspi being added to access control list",
            "title": "Displaying Raspi OpenCV camera images to a Mac"
        },
        {
            "location": "/imutils/",
            "text": "imutils Notes\n\n\nA detailed description of the \nimutils\n Python package is \n\nhere\n.\n\n\nInstallation\n\n\nInstall \nimutils\n with:\n\n\n$ pip install imutils",
            "title": "imutils"
        },
        {
            "location": "/imutils/#imutils-notes",
            "text": "A detailed description of the  imutils  Python package is  here .",
            "title": "imutils Notes"
        },
        {
            "location": "/imutils/#installation",
            "text": "Install  imutils  with:  $ pip install imutils",
            "title": "Installation"
        },
        {
            "location": "/numpy/",
            "text": "numpy Notes\n\n\nA detailed description of the \nnumpy\n Python package is \n\nhere\n.\n\n\nInstallation\n\n\nInstall \nnumpy\n with:\n\n\n$ pip install numpy",
            "title": "numpy"
        },
        {
            "location": "/numpy/#numpy-notes",
            "text": "A detailed description of the  numpy  Python package is  here .",
            "title": "numpy Notes"
        },
        {
            "location": "/numpy/#installation",
            "text": "Install  numpy  with:  $ pip install numpy",
            "title": "Installation"
        },
        {
            "location": "/grpc/",
            "text": "gRPC Notes\n\n\nInstallation for Python\n\n\nDetail installation instructions are \nhere\n.\n\n\nInstall \ngRPC\n with:\n\n\n$ pip install grpcio\n$ pip install grpcio-tools\n\n\n\n\nIf the installation fails with \nImportError: No module named Cython\n, install \nCython\n with:\n\n\n$ pip install Cython",
            "title": "gRPC"
        },
        {
            "location": "/grpc/#grpc-notes",
            "text": "",
            "title": "gRPC Notes"
        },
        {
            "location": "/grpc/#installation-for-python",
            "text": "Detail installation instructions are  here .  Install  gRPC  with:  $ pip install grpcio\n$ pip install grpcio-tools  If the installation fails with  ImportError: No module named Cython , install  Cython  with:  $ pip install Cython",
            "title": "Installation for Python"
        },
        {
            "location": "/mqtt-client/",
            "text": "MQTT Client Notes\n\n\nPython Client Installation\n\n\nOSX\n\n\nPython 2\n\n\n$ pip install paho-mqtt\n\n\n\n\nPython 3\n\n\n$ pip3 install paho-mqtt\n\n\n\n\nRaspbian\n\n\n$ sudo apt-get install python3-pip\n$ sudo pip3 install paho-mqtt\n\n\n\n\nProgramming Notes\n\n\nUsage of wildcards in topic filters is described \n\nhere\n.",
            "title": "MQTT Client"
        },
        {
            "location": "/mqtt-client/#mqtt-client-notes",
            "text": "",
            "title": "MQTT Client Notes"
        },
        {
            "location": "/mqtt-client/#python-client-installation",
            "text": "",
            "title": "Python Client Installation"
        },
        {
            "location": "/mqtt-client/#osx",
            "text": "Python 2  $ pip install paho-mqtt  Python 3  $ pip3 install paho-mqtt",
            "title": "OSX"
        },
        {
            "location": "/mqtt-client/#raspbian",
            "text": "$ sudo apt-get install python3-pip\n$ sudo pip3 install paho-mqtt",
            "title": "Raspbian"
        },
        {
            "location": "/mqtt-client/#programming-notes",
            "text": "Usage of wildcards in topic filters is described  here .",
            "title": "Programming Notes"
        },
        {
            "location": "/tkinter/",
            "text": "Tkinter Notes\n\n\nA good \nTkinter\n introduction \nis \nhere",
            "title": "Tkinter"
        },
        {
            "location": "/tkinter/#tkinter-notes",
            "text": "A good  Tkinter  introduction \nis  here",
            "title": "Tkinter Notes"
        },
        {
            "location": "/git/",
            "text": "Git Notes\n\n\nA good \nGit\n tutorial is \n\nhere\n\n\nInstallation\n\n\nOSX\n\n\nInstall git on OSX with:\n\n\n$ brew install git\n\n\n\n\nev3dev and Raspi\n\n\n$ sudo apt-get install git\n\n\n\n\nCloning a Repo\n\n\nClone a repo from \nAthenian Robotics\n with:\n\n\n$ git clone https://github.com/athenian-robotics/ev3dev-python-intro.git\n\n\n\n\nTo find the URL for a particular repo, go to it's github page and \nclick on the \nClone or download\n button and copy the URL in the pop-up\nwindow. Make sure that the repo URL begins with \nhttps:\n and not \ngit:\n. \nYou can toggle between the two versions by clicking on \nUse HTTPS\n and \nUse SSH\n.",
            "title": "Git"
        },
        {
            "location": "/git/#git-notes",
            "text": "A good  Git  tutorial is  here",
            "title": "Git Notes"
        },
        {
            "location": "/git/#installation",
            "text": "",
            "title": "Installation"
        },
        {
            "location": "/git/#osx",
            "text": "Install git on OSX with:  $ brew install git",
            "title": "OSX"
        },
        {
            "location": "/git/#ev3dev-and-raspi",
            "text": "$ sudo apt-get install git",
            "title": "ev3dev and Raspi"
        },
        {
            "location": "/git/#cloning-a-repo",
            "text": "Clone a repo from  Athenian Robotics  with:  $ git clone https://github.com/athenian-robotics/ev3dev-python-intro.git  To find the URL for a particular repo, go to it's github page and \nclick on the  Clone or download  button and copy the URL in the pop-up\nwindow. Make sure that the repo URL begins with  https:  and not  git: . \nYou can toggle between the two versions by clicking on  Use HTTPS  and  Use SSH .",
            "title": "Cloning a Repo"
        },
        {
            "location": "/pycharm/",
            "text": "PyCharm Notes\n\n\nInstallation\n\n\nAfter installing \nPyCharm\n, enable the Toolbar and \nTool Buttons by clicking on \nView-->Toolbar\n and \nView-->Tool Buttons\n.\n\n\nAdjusting the PyCharm Interpreter Path\n\n\nThe \nPYTHONPATH\n shell variable is used to modify the interpreter path in the shell.\n\n\nTo modify the interpreter path in PyCharm:\n\n\n1) Open the Preferences panel \n\n\n2) Double click on \nProject:your-project-name\n\n\n3) Click on \nProject Interpreter\n  \n\n\n4) Click on \n...\n next to the \"Project Interpreter\" value\n\n\n5) Click on \nMore...\n\n\n6) Click on the interpreter you are using \n\n\n7) Click on the tree symbol \n\n\nat the bottom of the dialog (hovering over the symbol reveals \"Show paths for the selected interpreter\")\n\n\n8) Click on the \"plus\" symbol \n\n\nand add your package\n\n\nAny change you make to the interpreter path will be seen by all your PyCharm projects, so you do not\nhave to go through this process multiple times.\n\n\nAdditional instructions are \n\nhere\n.",
            "title": "PyCharm"
        },
        {
            "location": "/pycharm/#pycharm-notes",
            "text": "",
            "title": "PyCharm Notes"
        },
        {
            "location": "/pycharm/#installation",
            "text": "After installing  PyCharm , enable the Toolbar and \nTool Buttons by clicking on  View-->Toolbar  and  View-->Tool Buttons .",
            "title": "Installation"
        },
        {
            "location": "/pycharm/#adjusting-the-pycharm-interpreter-path",
            "text": "The  PYTHONPATH  shell variable is used to modify the interpreter path in the shell.  To modify the interpreter path in PyCharm:  1) Open the Preferences panel   2) Double click on  Project:your-project-name  3) Click on  Project Interpreter     4) Click on  ...  next to the \"Project Interpreter\" value  5) Click on  More...  6) Click on the interpreter you are using   7) Click on the tree symbol  \nat the bottom of the dialog (hovering over the symbol reveals \"Show paths for the selected interpreter\")  8) Click on the \"plus\" symbol  \nand add your package  Any change you make to the interpreter path will be seen by all your PyCharm projects, so you do not\nhave to go through this process multiple times.  Additional instructions are  here .",
            "title": "Adjusting the PyCharm Interpreter Path"
        },
        {
            "location": "/homebrew/",
            "text": "Homebrew Notes\n\n\nThe Homebrew homepage is \nhere\n.\n\n\nInstallation\n\n\nInstall Homebrew on OSX with:\n\n\n$ /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n\n\n\n\nUsage\n\n\nUpgrade installed packages with:\n\n\n$ brew update\n$ brew upgrade\n\n\n\n\nList installed packages with:\n\n\n$ brew list\n\n\n\n\nCheck the health of your \nbrew\n configuration with:\n\n\n$ brew doctor\n\n\n\n\nCleanup old files with:\n\n\n$ brew prune",
            "title": "Homebrew"
        },
        {
            "location": "/homebrew/#homebrew-notes",
            "text": "The Homebrew homepage is  here .",
            "title": "Homebrew Notes"
        },
        {
            "location": "/homebrew/#installation",
            "text": "Install Homebrew on OSX with:  $ /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"",
            "title": "Installation"
        },
        {
            "location": "/homebrew/#usage",
            "text": "Upgrade installed packages with:  $ brew update\n$ brew upgrade  List installed packages with:  $ brew list  Check the health of your  brew  configuration with:  $ brew doctor  Cleanup old files with:  $ brew prune",
            "title": "Usage"
        },
        {
            "location": "/mqtt-broker/",
            "text": "MQTT Broker Notes\n\n\nInstallation\n\n\nOSX\n\n\nInstall mosquitto with:\n\n\n$ brew install mosquitto\n\n\n\n\nAdd mosquitto to launchd with:\n\n\n$ brew services start mosquitto\n\n\n\n\nIf you don't want to run mosquitto as a background service, run it from the command line with:\n\n\n$ /usr/local/sbin/mosquitto -c /usr/local/etc/mosquitto/mosquitto.conf\n\n\n\n\nWindows\n\n\nCreate a folder named \nmosquitto\n in \nC:\\Program Files (x86)\n.\n\n\nDownload and install \nWin32 OpenSSL v.1.0.2j Light\n. \nSelect the option to save the binaries to \n/bin\n. Find \nlibeay32.dll\n and \nssleay32.dll\n, move them to \nmosquitto\n.\n\n\nDownload \npthreadVC2.dll\n, move it to \nmosquitto\n.\n\n\nDownload and install \nmosquitto\n to the default \ndirectory (should be the folder created earlier).\n\n\nOpen Services, find \nMosquitto Broker\n and start it.\n\n\nTo be able to run it from the command line, open System Properties, go to the Advanced tab, \nand open Environment Variables. Add the path to \nmosquitto\n to the user Path variable, followed by \n;\n.\ne.g.\n\n\nC:\\Program Files (x86)\\mosquitto;\n\n\n\n\nCommands are run in cmd like OSX and Linux.\n\n\nDocker\n\n\nRun mosquitto as a docker service with:\n\n\n$ docker run -ti -p 1883:1883 -p 9001:9001 toke/mosquitto\n\n\n\n\nImage details are \nhere\n.\n\n\nRaspbian\n\n\nInstall mosquitto with:\n\n\n$ sudo apt-get install mosquitto\n$ sudo apt-get install mosquitto-clients\n\n\n\n\nVerify that the broker is running with:\n\n\n$ systemctl status mosquitto\n\n\n\n\nTesting the MQTT Broker from CLI\n\n\nSubscribe\n\n\n$ mosquitto_sub -d -h localhost -t testtopic\nClient mosqsub/27524-pleiku.lo sending CONNECT\nClient mosqsub/27524-pleiku.lo received CONNACK\nClient mosqsub/27524-pleiku.lo sending SUBSCRIBE (Mid: 1, Topic: testtopic, QoS: 0)\nClient mosqsub/27524-pleiku.lo received SUBACK\nSubscribed (mid: 1): 0\n\n\n\n\nPublish\n\n\n$ mosquitto_pub -d -h localhost -m \"simple val\" -t testtopic\nClient mosqpub/27472-pleiku.lo sending CONNECT\nClient mosqpub/27472-pleiku.lo received CONNACK\nClient mosqpub/27472-pleiku.lo sending PUBLISH (d0, q0, r0, m1, 'testtopic', ... (10 bytes))\nClient mosqpub/27472-pleiku.lo sending DISCONNECT",
            "title": "MQTT Broker"
        },
        {
            "location": "/mqtt-broker/#mqtt-broker-notes",
            "text": "",
            "title": "MQTT Broker Notes"
        },
        {
            "location": "/mqtt-broker/#installation",
            "text": "",
            "title": "Installation"
        },
        {
            "location": "/mqtt-broker/#osx",
            "text": "Install mosquitto with:  $ brew install mosquitto  Add mosquitto to launchd with:  $ brew services start mosquitto  If you don't want to run mosquitto as a background service, run it from the command line with:  $ /usr/local/sbin/mosquitto -c /usr/local/etc/mosquitto/mosquitto.conf",
            "title": "OSX"
        },
        {
            "location": "/mqtt-broker/#windows",
            "text": "Create a folder named  mosquitto  in  C:\\Program Files (x86) .  Download and install  Win32 OpenSSL v.1.0.2j Light . \nSelect the option to save the binaries to  /bin . Find  libeay32.dll  and  ssleay32.dll , move them to  mosquitto .  Download  pthreadVC2.dll , move it to  mosquitto .  Download and install  mosquitto  to the default \ndirectory (should be the folder created earlier).  Open Services, find  Mosquitto Broker  and start it.  To be able to run it from the command line, open System Properties, go to the Advanced tab, \nand open Environment Variables. Add the path to  mosquitto  to the user Path variable, followed by  ; .\ne.g.  C:\\Program Files (x86)\\mosquitto;  Commands are run in cmd like OSX and Linux.",
            "title": "Windows"
        },
        {
            "location": "/mqtt-broker/#docker",
            "text": "Run mosquitto as a docker service with:  $ docker run -ti -p 1883:1883 -p 9001:9001 toke/mosquitto  Image details are  here .",
            "title": "Docker"
        },
        {
            "location": "/mqtt-broker/#raspbian",
            "text": "Install mosquitto with:  $ sudo apt-get install mosquitto\n$ sudo apt-get install mosquitto-clients  Verify that the broker is running with:  $ systemctl status mosquitto",
            "title": "Raspbian"
        },
        {
            "location": "/mqtt-broker/#testing-the-mqtt-broker-from-cli",
            "text": "",
            "title": "Testing the MQTT Broker from CLI"
        },
        {
            "location": "/mqtt-broker/#subscribe",
            "text": "$ mosquitto_sub -d -h localhost -t testtopic\nClient mosqsub/27524-pleiku.lo sending CONNECT\nClient mosqsub/27524-pleiku.lo received CONNACK\nClient mosqsub/27524-pleiku.lo sending SUBSCRIBE (Mid: 1, Topic: testtopic, QoS: 0)\nClient mosqsub/27524-pleiku.lo received SUBACK\nSubscribed (mid: 1): 0",
            "title": "Subscribe"
        },
        {
            "location": "/mqtt-broker/#publish",
            "text": "$ mosquitto_pub -d -h localhost -m \"simple val\" -t testtopic\nClient mosqpub/27472-pleiku.lo sending CONNECT\nClient mosqpub/27472-pleiku.lo received CONNACK\nClient mosqpub/27472-pleiku.lo sending PUBLISH (d0, q0, r0, m1, 'testtopic', ... (10 bytes))\nClient mosqpub/27472-pleiku.lo sending DISCONNECT",
            "title": "Publish"
        },
        {
            "location": "/plotly/",
            "text": "Plot.ly Notes\n\n\nFor full documentation visit \nplot.ly\n.\n\n\nOne-time Setup\n\n\nBefore using plot.ly, follow these steps:\n\n\n1) \nSign up\n and create a plot.ly account. Notice that \nyou can click on the github logo and use your GitHub credentials to sign up.\n\n\n2) Create your credentials file:\n\n\n$ pip install plotly\n$ python\n>>> import plotly\n>>> plotly.tools.set_credentials_file(username='YourName', api_key='YourKey')\n\n\n\n\nThis will create a \n~/.plotly/.credentials\n file. \n\n\n3) You will be using \nplot.ly streams\n, \nso create some streaming API tokens\n\nhere\n. You should create 3 to start.\n\n\n4) Manually add the newly created streaming API tokens to \n~/.plotly/.credentials\n: \n\n\n{\n    \"username\": \"YourName\",\n    \"stream_ids\": [\n        \"id1\",\n        \"id2\",\n        \"id3\"\n    ],\n    \"api_key\": \"YourKey\",\n    \"proxy_username\": \"\",\n    \"proxy_password\": \"\"\n}\n\n\n\n\nPython API\n\n\nOnce your streaming API tokens are added, you can use them in your code without \na hard-coded reference:\n\n\nimport plotly.plotly as py\nimport plotly.tools as tls\n\nstream_ids = tls.get_credentials_file()['stream_ids']\n# Use the first streaming API token\nstream_id = stream_ids[0]\nstream = py.Stream(stream_id)\nstream.open()",
            "title": "Plot.ly"
        },
        {
            "location": "/plotly/#plotly-notes",
            "text": "For full documentation visit  plot.ly .",
            "title": "Plot.ly Notes"
        },
        {
            "location": "/plotly/#one-time-setup",
            "text": "Before using plot.ly, follow these steps:  1)  Sign up  and create a plot.ly account. Notice that \nyou can click on the github logo and use your GitHub credentials to sign up.  2) Create your credentials file:  $ pip install plotly\n$ python\n>>> import plotly\n>>> plotly.tools.set_credentials_file(username='YourName', api_key='YourKey')  This will create a  ~/.plotly/.credentials  file.   3) You will be using  plot.ly streams , \nso create some streaming API tokens here . You should create 3 to start.  4) Manually add the newly created streaming API tokens to  ~/.plotly/.credentials :   {\n    \"username\": \"YourName\",\n    \"stream_ids\": [\n        \"id1\",\n        \"id2\",\n        \"id3\"\n    ],\n    \"api_key\": \"YourKey\",\n    \"proxy_username\": \"\",\n    \"proxy_password\": \"\"\n}",
            "title": "One-time Setup"
        },
        {
            "location": "/plotly/#python-api",
            "text": "Once your streaming API tokens are added, you can use them in your code without \na hard-coded reference:  import plotly.plotly as py\nimport plotly.tools as tls\n\nstream_ids = tls.get_credentials_file()['stream_ids']\n# Use the first streaming API token\nstream_id = stream_ids[0]\nstream = py.Stream(stream_id)\nstream.open()",
            "title": "Python API"
        },
        {
            "location": "/xquartz/",
            "text": "XQuartz Notes\n\n\nXQuartz\n is an X server for OSX.\n\n\nInstallation\n\n\nDownload and install XQuartz from \nhere\n.\n\n\nType this on the Mac:\n\n\n$ xterm + raspberrypi\n\n\n\n\nAdd this line to ~/.profile on the Raspi:\n\n\nDISPLAY=pleiku.local:0.0 ; export DISPLAY\n\n\n\n\nVerify the setup on the Raspi with:\n\n\n$ lxsession",
            "title": "XQuartz"
        },
        {
            "location": "/xquartz/#xquartz-notes",
            "text": "XQuartz  is an X server for OSX.",
            "title": "XQuartz Notes"
        },
        {
            "location": "/xquartz/#installation",
            "text": "Download and install XQuartz from  here .  Type this on the Mac:  $ xterm + raspberrypi  Add this line to ~/.profile on the Raspi:  DISPLAY=pleiku.local:0.0 ; export DISPLAY  Verify the setup on the Raspi with:  $ lxsession",
            "title": "Installation"
        },
        {
            "location": "/mkdocs/",
            "text": "MkDocs Notes\n\n\nFor full documentation visit \nmkdocs.org\n.\n\n\nCommands\n\n\n\n\nmkdocs new [dir-name]\n - Create a new project.\n\n\nmkdocs serve\n - Start the live-reloading docs server.\n\n\nmkdocs build\n - Build the documentation site.\n\n\nmkdocs help\n - Print this help message.\n\n\n\n\nProject Layout\n\n\nmkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\nsite/         # Generated website\n\n\n\nMarkdown\n\n\nA Markdown cheatsheet is \n\nhere\n.",
            "title": "MkDocs"
        },
        {
            "location": "/mkdocs/#mkdocs-notes",
            "text": "For full documentation visit  mkdocs.org .",
            "title": "MkDocs Notes"
        },
        {
            "location": "/mkdocs/#commands",
            "text": "mkdocs new [dir-name]  - Create a new project.  mkdocs serve  - Start the live-reloading docs server.  mkdocs build  - Build the documentation site.  mkdocs help  - Print this help message.",
            "title": "Commands"
        },
        {
            "location": "/mkdocs/#project-layout",
            "text": "mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\nsite/         # Generated website",
            "title": "Project Layout"
        },
        {
            "location": "/mkdocs/#markdown",
            "text": "A Markdown cheatsheet is  here .",
            "title": "Markdown"
        },
        {
            "location": "/raspberrypi/",
            "text": "Raspberry Pi Notes\n\n\nInstall Raspian\n\n\nOSX\n\n\n\n\n\n\nDownload the \nRaspbian distro\n.\n\n\n\n\n\n\nBurn the .img file to a SD card with \nEtcher\n.\n\n\n\n\n\n\nImportant:\n Remove and reinsert SD card and add a file named \nssh\n to the SD card boot partition.\nThis will enable \nssh\n on the Raspi.\n\n\n\n\n\n\n$ touch /Volumes/boot/ssh\n\n\n\n\n\n\n\n\nEject the SD card from the Mac, connect an ethernet cable to the Raspi, and power up the Raspi.\n\n\n\n\n\n\nLogin to the Raspi with \nssh\n using the username \npi\n and password \nraspberry\n.\n\n\n\n\n\n\n$ ssh pi@raspberrypi\nAre you sure you want to continue connecting (yes/no)? yes\nPassword: raspberry\npi@raspberrypi:~ \n\n\n\n\nIf you get a \nHost key verification failed\n error when using \nssh\n, \nremove the \nraspberry.local\n entry from ~/.ssh/known_hosts on your Mac with:\n\n\n$ nano ~/.ssh/known_hosts\n\n\n\n\nResize root partition\n\n\nResize the root partition with \nraspi-config\n.\nChoose \"Expand Filesystem\", tab to \n and then reboot.\n\n\npi@raspberrypi:~ $ sudo raspi-config\n\n\n\n\nUpdate distro\n\n\nUpdate the Raspbian distro to the latest and greatest bits with:\n\n\npi@raspberrypi:~ $ sudo apt-get update\npi@raspberrypi:~ $ sudo apt-get upgrade\npi@raspberrypi:~ $ sudo apt-get dist-upgrade\npi@raspberrypi:~ $ sudo reboot now\n\n\n\n\nChange hostname\n\n\nMultiple Raspis on your network cannot share the same hostname. Change your hostname with:\n\n\npi@raspberrypi:~ $ sudo nano /etc/hostname\npi@raspberrypi:~ $ sudo reboot now\n\n\n\n\nEnable Wi-Fi\n\n\npi@raspberrypi:~ $ sudo nano /etc/wpa_supplicant/wpa_supplicant.conf\n\n\n\n\nAdd a network entry for each SID with which the Raspi will need to connect:\n\n\nnetwork={\n    ssid=\"MyWiFiNetwork1\"\n    psk=\"the_password1\"\n    key_mgmt=WPA-PSK\n}\n\nnetwork={\n    ssid=\"MyWiFiNetwork2\"\n    psk=\"the_password2\"\n    key_mgmt=WPA-PSK\n}\n\n\n\n\nEnable VNC\n\n\nEnable VNC with \nraspi-config\n. Choose the \nInterfacing Options\n and then \nthe \nVNC\n option. Tab to \n and then reboot.\n\n\nStart the VNC server with:\n\n\npi@raspberrypi:~ $ vncserver :1 -geometry 1024x728 -depth 24\n\n\n\n\nUse \n-geometry 2048x1456\n for a larger display.\n\n\nDownload a \nVNCViewer\n app from \n\nhere\n. \n\n\nStart the \nVNCViewer\n app on the Mac and connect to the Raspi at \nraspberrypi:1\n.\n\n\nEnable a camera\n\n\nEnable a Pi camera with \nraspi-config\n. Select the \nInterfacing Options\n and then the \nCamera\n option.\nTab to \n and then reboot.\n\n\npi@raspberrypi:~ $ sudo raspi-config\n\n\n\n\nInstall File sharing\n\n\nDetails are \nhere\n.\n\n\nEnable file sharing with:\n\n\npi@raspberrypi:~ $ sudo apt-get install netatalk",
            "title": "Raspberry Pi"
        },
        {
            "location": "/raspberrypi/#raspberry-pi-notes",
            "text": "",
            "title": "Raspberry Pi Notes"
        },
        {
            "location": "/raspberrypi/#install-raspian",
            "text": "",
            "title": "Install Raspian"
        },
        {
            "location": "/raspberrypi/#osx",
            "text": "Download the  Raspbian distro .    Burn the .img file to a SD card with  Etcher .    Important:  Remove and reinsert SD card and add a file named  ssh  to the SD card boot partition.\nThis will enable  ssh  on the Raspi.    $ touch /Volumes/boot/ssh    Eject the SD card from the Mac, connect an ethernet cable to the Raspi, and power up the Raspi.    Login to the Raspi with  ssh  using the username  pi  and password  raspberry .    $ ssh pi@raspberrypi\nAre you sure you want to continue connecting (yes/no)? yes\nPassword: raspberry\npi@raspberrypi:~   If you get a  Host key verification failed  error when using  ssh , \nremove the  raspberry.local  entry from ~/.ssh/known_hosts on your Mac with:  $ nano ~/.ssh/known_hosts",
            "title": "OSX"
        },
        {
            "location": "/raspberrypi/#resize-root-partition",
            "text": "Resize the root partition with  raspi-config .\nChoose \"Expand Filesystem\", tab to   and then reboot.  pi@raspberrypi:~ $ sudo raspi-config",
            "title": "Resize root partition"
        },
        {
            "location": "/raspberrypi/#update-distro",
            "text": "Update the Raspbian distro to the latest and greatest bits with:  pi@raspberrypi:~ $ sudo apt-get update\npi@raspberrypi:~ $ sudo apt-get upgrade\npi@raspberrypi:~ $ sudo apt-get dist-upgrade\npi@raspberrypi:~ $ sudo reboot now",
            "title": "Update distro"
        },
        {
            "location": "/raspberrypi/#change-hostname",
            "text": "Multiple Raspis on your network cannot share the same hostname. Change your hostname with:  pi@raspberrypi:~ $ sudo nano /etc/hostname\npi@raspberrypi:~ $ sudo reboot now",
            "title": "Change hostname"
        },
        {
            "location": "/raspberrypi/#enable-wi-fi",
            "text": "pi@raspberrypi:~ $ sudo nano /etc/wpa_supplicant/wpa_supplicant.conf  Add a network entry for each SID with which the Raspi will need to connect:  network={\n    ssid=\"MyWiFiNetwork1\"\n    psk=\"the_password1\"\n    key_mgmt=WPA-PSK\n}\n\nnetwork={\n    ssid=\"MyWiFiNetwork2\"\n    psk=\"the_password2\"\n    key_mgmt=WPA-PSK\n}",
            "title": "Enable Wi-Fi"
        },
        {
            "location": "/raspberrypi/#enable-vnc",
            "text": "Enable VNC with  raspi-config . Choose the  Interfacing Options  and then \nthe  VNC  option. Tab to   and then reboot.  Start the VNC server with:  pi@raspberrypi:~ $ vncserver :1 -geometry 1024x728 -depth 24  Use  -geometry 2048x1456  for a larger display.  Download a  VNCViewer  app from  here .   Start the  VNCViewer  app on the Mac and connect to the Raspi at  raspberrypi:1 .",
            "title": "Enable VNC"
        },
        {
            "location": "/raspberrypi/#enable-a-camera",
            "text": "Enable a Pi camera with  raspi-config . Select the  Interfacing Options  and then the  Camera  option.\nTab to   and then reboot.  pi@raspberrypi:~ $ sudo raspi-config",
            "title": "Enable a camera"
        },
        {
            "location": "/raspberrypi/#install-file-sharing",
            "text": "Details are  here .  Enable file sharing with:  pi@raspberrypi:~ $ sudo apt-get install netatalk",
            "title": "Install File sharing"
        },
        {
            "location": "/arduino/",
            "text": "Arduino Notes\n\n\npyFirmata\n\n\nDetailed instructions for \npyFirmata\n are \nhere\n.\n\n\nInstall \npyFirmata\n with:\n\n\n$ pip install pyfirmata",
            "title": "Arduino"
        },
        {
            "location": "/arduino/#arduino-notes",
            "text": "",
            "title": "Arduino Notes"
        },
        {
            "location": "/arduino/#pyfirmata",
            "text": "Detailed instructions for  pyFirmata  are  here .  Install  pyFirmata  with:  $ pip install pyfirmata",
            "title": "pyFirmata"
        },
        {
            "location": "/sdcards/",
            "text": "SD Cards Notes\n\n\nBurn an SD card\n\n\nOSX\n\n\nDownload a \nRaspian\n image frome \nhere\n\n\nUse \nEtcher\n to burn an image file to an SD card.\n\n\nCopy an SD card\n\n\nOSX\n\n\nInsert an SD card and determine the mount point with:\n\n\n$ diskutil list\n\n\n\n\nIf the mount point were \n/dev/disk3\n, copy the contents to \n~/Desktop/raspberrypi.dmg\n with:\n\n\n$ sudo dd if=/dev/disk3 of=~/Desktop/raspberrypi.dmg\n\n\n\n\nAfter creating the \n.img\n file, use \nEtcher\n to burn the image file to an SD card.",
            "title": "SD Cards"
        },
        {
            "location": "/sdcards/#sd-cards-notes",
            "text": "",
            "title": "SD Cards Notes"
        },
        {
            "location": "/sdcards/#burn-an-sd-card",
            "text": "",
            "title": "Burn an SD card"
        },
        {
            "location": "/sdcards/#osx",
            "text": "Download a  Raspian  image frome  here  Use  Etcher  to burn an image file to an SD card.",
            "title": "OSX"
        },
        {
            "location": "/sdcards/#copy-an-sd-card",
            "text": "",
            "title": "Copy an SD card"
        },
        {
            "location": "/sdcards/#osx_1",
            "text": "Insert an SD card and determine the mount point with:  $ diskutil list  If the mount point were  /dev/disk3 , copy the contents to  ~/Desktop/raspberrypi.dmg  with:  $ sudo dd if=/dev/disk3 of=~/Desktop/raspberrypi.dmg  After creating the  .img  file, use  Etcher  to burn the image file to an SD card.",
            "title": "OSX"
        },
        {
            "location": "/blinkt/",
            "text": "Blinkt Notes\n\n\nA Blinkt! can be purchased \nhere\n.\n\n\nThe Blinkt github repo is \nhere\n.\n\n\nInstallation\n\n\nRaspbian\n\n\nPython 3:\n\n\n$ sudo apt-get install python3-blinkt\n\n\n\n\nPython 2:\n\n\n$ sudo apt-get install python-blinkt\n\n\n\n\nOSX\n\n\nPython 3:\n\n\n$ pip3 install blinkt\n\n\n\n\nPython 2:\n\n\n$ pip install blinkt",
            "title": "Blinkt"
        },
        {
            "location": "/blinkt/#blinkt-notes",
            "text": "A Blinkt! can be purchased  here .  The Blinkt github repo is  here .",
            "title": "Blinkt Notes"
        },
        {
            "location": "/blinkt/#installation",
            "text": "",
            "title": "Installation"
        },
        {
            "location": "/blinkt/#raspbian",
            "text": "Python 3:  $ sudo apt-get install python3-blinkt  Python 2:  $ sudo apt-get install python-blinkt",
            "title": "Raspbian"
        },
        {
            "location": "/blinkt/#osx",
            "text": "Python 3:  $ pip3 install blinkt  Python 2:  $ pip install blinkt",
            "title": "OSX"
        },
        {
            "location": "/unicorn/",
            "text": "Unicorn Hat Notes\n\n\nA Unicorn Hat can be purchased \n\nhere\n\n\nThe github repo is \nhere\n.\n\n\nExamples are \nhere\n.\n\n\nRaspbian Installation\n\n\nPython 3\n\n\n$ sudo apt-get install python3-pip python3-dev\n$ sudo pip3 install unicornhat\n\n\n\n\nPython 2\n\n\n$ sudo apt-get install python-pip python-dev\n$ sudo pip install unicornhat\n\n\n\n\nIf you get an error message \nCan't open /dev/mem: Permission denied\n, then run the program with \nsudo\n.",
            "title": "Unicorn Hat"
        },
        {
            "location": "/unicorn/#unicorn-hat-notes",
            "text": "A Unicorn Hat can be purchased  here  The github repo is  here .  Examples are  here .",
            "title": "Unicorn Hat Notes"
        },
        {
            "location": "/unicorn/#raspbian-installation",
            "text": "Python 3  $ sudo apt-get install python3-pip python3-dev\n$ sudo pip3 install unicornhat  Python 2  $ sudo apt-get install python-pip python-dev\n$ sudo pip install unicornhat  If you get an error message  Can't open /dev/mem: Permission denied , then run the program with  sudo .",
            "title": "Raspbian Installation"
        },
        {
            "location": "/displayotron/",
            "text": "Display-O-Tron Hat Notes\n\n\nA Display-O-Tron can be purchased from \nhere\n\n\nThe github repo is \nhere\n.\n\n\nA \nGetting Started\n is \nhere\n\n\nA \nReference\n is \nhere\n\n\nTutorials are \nhere\n\n\nExamples are \nhere\n.\n\n\nRaspbian Installation\n\n\nInstall the driver with:\n\n\n$ curl -sS get.pimoroni.com/displayotron | bash",
            "title": "Display-O-Tron Hat"
        },
        {
            "location": "/displayotron/#display-o-tron-hat-notes",
            "text": "A Display-O-Tron can be purchased from  here  The github repo is  here .  A  Getting Started  is  here  A  Reference  is  here  Tutorials are  here  Examples are  here .",
            "title": "Display-O-Tron Hat Notes"
        },
        {
            "location": "/displayotron/#raspbian-installation",
            "text": "Install the driver with:  $ curl -sS get.pimoroni.com/displayotron | bash",
            "title": "Raspbian Installation"
        },
        {
            "location": "/gopigo/",
            "text": "GoPiGo Notes\n\n\nA GoPiGo can be purchased \n\nhere\n.\n\n\nA GoPiGo intro is \n\nhere\n.\n\n\nA GoPiGo overview is \n\nhere\n.\n\n\nSetup\n\n\nVerify GoPiGo is on your network\n\n\nVerify that your GoPiGo is on your network with:\n\n\n$ ping dex.local\n\n\n\n\nIf your GoPiGo is on your network, you will see something like:\n\n\nPING dex.local (192.168.1.44): 56 data bytes\n64 bytes from 192.168.1.54: icmp_seq=0 ttl=64 time=5.865 ms\n64 bytes from 192.168.1.54: icmp_seq=1 ttl=64 time=12.350 ms\n...\n\n\n\n\nTerminate the \nping\n output by hitting ctrl-C.\n\n\nIf it is not on your network, you will see something like:\n\n\nping: cannot resolve dex.local: Unknown host\n\n\n\n\nConnect to the GoPiGo's Raspi:\n\n\nAfter plugging in the ethernet cable, connect to the GoPiGo's Raspi with:\n\n\n$ ssh pi@dex.local\nAre you sure you want to continue connecting (yes/no)? yes\nPassword: robots1234\npi@dex:~ $\n\n\n\n\nEnable Wi-Fi\n\n\npi@dex:~ $ sudo nano /etc/wpa_supplicant/wpa_supplicant.conf\n\n\n\n\nAdd a network entry for each SID with which the Raspi on the GoPiGo will need to connect:\n\n\nnetwork={\n    ssid=\"MyWiFiNetwork1\"\n    psk=\"the_password1\"\n    key_mgmt=WPA-PSK\n}\n\nnetwork={\n    ssid=\"MyWiFiNetwork2\"\n    psk=\"the_password2\"\n    key_mgmt=WPA-PSK\n}\n\n\n\n\nReboot with:\n\n\npi@dex:~ $ sudo reboot now\n\n\n\n\nAfter disconnecting the ethernet cable, verify the Wi-Fi on the GoPiGo's Raspi is working with:\n\n\n$ ssh pi@dex.local\nPassword: robots1234\npi@dex:~ $\n\n\n\n\nChange hostname\n\n\nMultiple GoPiGos on your network cannot share the same hostname. Change your hostname with:\n\n\npi@dex:~ $ sudo nano /etc/hostname\npi@dex:~ $ sudo reboot now\n\n\n\n\nUpdate the OS\n\n\nUpdate the Linux distro with:\n\n\npi@dex:~ $ sudo apt-get update\npi@dex:~ $ sudo apt-get upgrade\npi@dex:~ $ sudo apt-get dist-upgrade\npi@dex:~ $ sudo apt-get autoremove\npi@dex:~ $ sudo reboot now",
            "title": "GoPiGo"
        },
        {
            "location": "/gopigo/#gopigo-notes",
            "text": "A GoPiGo can be purchased  here .  A GoPiGo intro is  here .  A GoPiGo overview is  here .",
            "title": "GoPiGo Notes"
        },
        {
            "location": "/gopigo/#setup",
            "text": "",
            "title": "Setup"
        },
        {
            "location": "/gopigo/#verify-gopigo-is-on-your-network",
            "text": "Verify that your GoPiGo is on your network with:  $ ping dex.local  If your GoPiGo is on your network, you will see something like:  PING dex.local (192.168.1.44): 56 data bytes\n64 bytes from 192.168.1.54: icmp_seq=0 ttl=64 time=5.865 ms\n64 bytes from 192.168.1.54: icmp_seq=1 ttl=64 time=12.350 ms\n...  Terminate the  ping  output by hitting ctrl-C.  If it is not on your network, you will see something like:  ping: cannot resolve dex.local: Unknown host",
            "title": "Verify GoPiGo is on your network"
        },
        {
            "location": "/gopigo/#connect-to-the-gopigos-raspi",
            "text": "After plugging in the ethernet cable, connect to the GoPiGo's Raspi with:  $ ssh pi@dex.local\nAre you sure you want to continue connecting (yes/no)? yes\nPassword: robots1234\npi@dex:~ $",
            "title": "Connect to the GoPiGo's Raspi:"
        },
        {
            "location": "/gopigo/#enable-wi-fi",
            "text": "pi@dex:~ $ sudo nano /etc/wpa_supplicant/wpa_supplicant.conf  Add a network entry for each SID with which the Raspi on the GoPiGo will need to connect:  network={\n    ssid=\"MyWiFiNetwork1\"\n    psk=\"the_password1\"\n    key_mgmt=WPA-PSK\n}\n\nnetwork={\n    ssid=\"MyWiFiNetwork2\"\n    psk=\"the_password2\"\n    key_mgmt=WPA-PSK\n}  Reboot with:  pi@dex:~ $ sudo reboot now  After disconnecting the ethernet cable, verify the Wi-Fi on the GoPiGo's Raspi is working with:  $ ssh pi@dex.local\nPassword: robots1234\npi@dex:~ $",
            "title": "Enable Wi-Fi"
        },
        {
            "location": "/gopigo/#change-hostname",
            "text": "Multiple GoPiGos on your network cannot share the same hostname. Change your hostname with:  pi@dex:~ $ sudo nano /etc/hostname\npi@dex:~ $ sudo reboot now",
            "title": "Change hostname"
        },
        {
            "location": "/gopigo/#update-the-os",
            "text": "Update the Linux distro with:  pi@dex:~ $ sudo apt-get update\npi@dex:~ $ sudo apt-get upgrade\npi@dex:~ $ sudo apt-get dist-upgrade\npi@dex:~ $ sudo apt-get autoremove\npi@dex:~ $ sudo reboot now",
            "title": "Update the OS"
        },
        {
            "location": "/ev3-admin/",
            "text": "EV3 Administration\n\n\nFor full ev3dev documentation visit \n\nhere\n.\n\n\nFor full ev3dev Python documentation visit \n\nhere\n.\n\n\nConnecting\n\n\nThe default username/password is: robot/maker\n\n\nConnect to an EV3 named \nev3dev1.local\n with:\n\n\n$ ssh robot@ev3dev1.local\n\n\n\n\nCopy files to an EV3 named \nev3dev1.local\n with a \nsftp\n session:\n\n\n$ sftp robot@ev3dev1.local\nrobot@ev3dev3.local's password: \nConnected to ev3dev3.local.\nsftp> put file_name\n\n\n\n\nExit from \nsftp\n with ctrl-D.\n\n\nOr you can use \nscp\n:\n\n\n$ scp file_name robot@ev3dev1.local:/home/robot/\n\n\n\n\nUpdate Linux Bits\n\n\n$ sudo apt-get update\n$ sudo apt-get upgrade\n$ sudo apt-get dist-upgrade\n$ sudo reboot now\n\n\n\n\nEV3 Python Bindings\n\n\nInstall the EV3 Python bindings on the EV3 with:\n\n\n$ pip install python-ev3dev\n\n\n\n\nTo avoid warnings within PyCharm, install the EV3 Python bindings on the \nhost machine with:\n \nbash\n $ pip3 install python-ev3dev",
            "title": "Admin"
        },
        {
            "location": "/ev3-admin/#ev3-administration",
            "text": "For full ev3dev documentation visit  here .  For full ev3dev Python documentation visit  here .",
            "title": "EV3 Administration"
        },
        {
            "location": "/ev3-admin/#connecting",
            "text": "The default username/password is: robot/maker  Connect to an EV3 named  ev3dev1.local  with:  $ ssh robot@ev3dev1.local  Copy files to an EV3 named  ev3dev1.local  with a  sftp  session:  $ sftp robot@ev3dev1.local\nrobot@ev3dev3.local's password: \nConnected to ev3dev3.local.\nsftp> put file_name  Exit from  sftp  with ctrl-D.  Or you can use  scp :  $ scp file_name robot@ev3dev1.local:/home/robot/",
            "title": "Connecting"
        },
        {
            "location": "/ev3-admin/#update-linux-bits",
            "text": "$ sudo apt-get update\n$ sudo apt-get upgrade\n$ sudo apt-get dist-upgrade\n$ sudo reboot now",
            "title": "Update Linux Bits"
        },
        {
            "location": "/ev3-admin/#ev3-python-bindings",
            "text": "Install the EV3 Python bindings on the EV3 with:  $ pip install python-ev3dev  To avoid warnings within PyCharm, install the EV3 Python bindings on the \nhost machine with:\n  bash\n $ pip3 install python-ev3dev",
            "title": "EV3 Python Bindings"
        },
        {
            "location": "/ev3-python/",
            "text": "EV3 Python\n\n\n\n\n\n\nThe ev3dev Python API is described \nhere\n.\n\n\n\n\n\n\nA great overview is \nhere\n.",
            "title": "Python"
        },
        {
            "location": "/ev3-python/#ev3-python",
            "text": "The ev3dev Python API is described  here .    A great overview is  here .",
            "title": "EV3 Python"
        }
    ]
}